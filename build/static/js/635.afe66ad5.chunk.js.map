{"version":3,"file":"static/js/635.afe66ad5.chunk.js","mappings":"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","sources":["components/Breadcrumbs.js","components/FullWidthImage.js","../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","components/JoinComponent.jsx","components/pages/AboutUsPage.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Breadcrumbs as MUIBreadcrumbs, Link, Typography } from '@mui/material';\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\nimport { useLocation, Link as RouterLink } from 'react-router-dom';\r\n\r\nconst Breadcrumbs = () => {\r\n  const location = useLocation();\r\n  const pathnames = location.pathname.split('/').filter((x) => x);\r\n\r\n  const formatBreadcrumb = (value) => {\r\n    // Replace hyphens with spaces and capitalize each word\r\n    return value.replace(/-/g, ' ').replace(/\\b\\w/g, (char) => char.toUpperCase());\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: '60px', marginBottom: '20px' }}>\r\n      <MUIBreadcrumbs\r\n        separator={<NavigateNextIcon fontSize=\"small\" />}\r\n        aria-label=\"breadcrumb\"\r\n        sx={{\r\n          fontSize: '0.8rem',\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n        }}\r\n      >\r\n        <Link\r\n          color=\"inherit\"\r\n          to=\"/\"\r\n          component={RouterLink}\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            fontSize: '0.8rem',\r\n            textDecoration: 'none',\r\n            padding: '6px 8px',\r\n            borderRadius: '4px',\r\n            background: '#f0f0f0',\r\n            transition: 'background 0.3s',\r\n            '&:hover': {\r\n              background: '#e0e0e0',\r\n            }\r\n          }}\r\n        >\r\n          <HomeIcon sx={{ mr: 0.5 }} fontSize=\"inherit\" />\r\n          Home\r\n        </Link>\r\n        {pathnames.map((value, index) => {\r\n          const to = `/${pathnames.slice(0, index + 1).join('/')}`;\r\n          const isLast = index === pathnames.length - 1;\r\n          const breadcrumb = formatBreadcrumb(value);\r\n\r\n          return isLast ? (\r\n            <Typography\r\n              color=\"textPrimary\"\r\n              key={to}\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                fontSize: '0.8rem',\r\n                padding: '6px 8px',\r\n                borderRadius: '4px',\r\n                background: '#f0f0f0'\r\n              }}\r\n            >\r\n              {breadcrumb}\r\n            </Typography>\r\n          ) : (\r\n            <Link\r\n              color=\"inherit\"\r\n              to={to}\r\n              component={RouterLink}\r\n              key={to}\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                fontSize: '0.8rem',\r\n                textDecoration: 'none',\r\n                padding: '6px 8px',\r\n                borderRadius: '4px',\r\n                background: '#f0f0f0',\r\n                transition: 'background 0.3s',\r\n                '&:hover': {\r\n                  background: '#e0e0e0',\r\n                }\r\n              }}\r\n            >\r\n              {breadcrumb}\r\n            </Link>\r\n          );\r\n        })}\r\n      </MUIBreadcrumbs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import React from 'react';\r\nimport './FullWidthImage.css';\r\n\r\n\r\n\r\nconst FullWidthImage = () => {\r\nconst culture = `${process.env.PUBLIC_URL}/images/herosection/culture.png`\r\n\r\n  return (\r\n    <div className=\"full-width-image-container\">\r\n      <img src={culture} alt=\"Culture\" className=\"full-width-image\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullWidthImage;\r\n","import { invariant } from '../../utils/errors.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","import { animationControls } from './animation-controls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\n/**\n * Creates `AnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `AnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","// File: JoinComponent.jsx\r\nimport React from 'react';\r\nimport { motion, useAnimation } from 'framer-motion';\r\nimport { FaUserPlus } from 'react-icons/fa';\r\nimport './JoinComponent.css';\r\n\r\nconst JoinComponent = () => {\r\n  const controls = useAnimation();\r\n\r\n  return (\r\n    <motion.div\r\n      className=\"join-container mb-5\"\r\n      initial={{ opacity: 0, y: 50 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n      onHoverStart={() => controls.start({ scale: 1.05 })}\r\n      onHoverEnd={() => controls.start({ scale: 1 })}\r\n    >\r\n      <div className=\"join-content\">\r\n        <h1 className='join-content-h1'>Join the Fredericton Association of Malayalees today!</h1>\r\n        <p>Become a member and be part of our vibrant community.</p>\r\n      </div>\r\n      <motion.button\r\n        className=\"join-signup-button\"\r\n        whileHover={{ backgroundColor: \"#d43f13\", color: \"#fff\", scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n      >\r\n        <FaUserPlus style={{ marginRight: '10px' }} /> Join Community\r\n      </motion.button>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default JoinComponent;\r\n","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './AboutUsPage.css';\r\nimport aboutData from \"../../config/aboutus.json\"; // Directly import the JSON data\r\nimport missionVisionData from \"../../config/missionvission.json\"; // Import mission and vision data\r\nimport Footer from '../Footer';\r\nimport FullWidthImage from '../FullWidthImage';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport Breadcrumbs from '../Breadcrumbs'; // Import Breadcrumbs component\r\nimport HelmetWrapper from '../HelmetWrapper'; // Import HelmetWrapper for SEO\r\nimport JoinComponent from '../JoinComponent';\r\n\r\nconst AboutUsPage = () => {\r\n\r\n\r\n  const [ref1, inView1] = useInView({ triggerOnce: false });\r\n  const [ref2, inView2] = useInView({ triggerOnce: false });\r\n  const [ref3, inView3] = useInView({ triggerOnce: false });\r\n  const [ref4, inView4] = useInView({ triggerOnce: false });\r\n\r\n  const aboutImage1 = `${process.env.PUBLIC_URL}/images/fredericton/image1.jpg`;\r\n  const aboutImage2 = `${process.env.PUBLIC_URL}/images/fredericton/image4.jpg`;\r\n\r\n  return (\r\n    <>\r\n      <HelmetWrapper \r\n        pageTitle=\"About Us - Fredericton Association of Malayalees\" \r\n        description=\"Learn more about the Fredericton Association of Malayalees.\" \r\n      />\r\n      <div className=\"about-us-page\">\r\n        <Container className=\"about-us-content\">\r\n          <Breadcrumbs /> {/* Add Breadcrumbs here */}\r\n          <Row className={`mb-1 ${inView1 ? 'animate' : ''}`} ref={ref1}>\r\n            <Col>\r\n              <h1 className=\"about-heading\">About Fredericton Association of Malayalees</h1>\r\n            </Col>\r\n          </Row>\r\n          <Row className='align-items-center'>\r\n            <Col md={6} className={`${inView2 ? 'animate' : 'align-items-center'}`} ref={ref2}>\r\n              <div className=\"about-description\">\r\n                {aboutData.about.description.map((paragraph, index) => (\r\n                  <p key={index}>{paragraph}</p>\r\n                ))}\r\n              </div>\r\n            </Col>\r\n            <Col md={6} className={`${inView2 ? 'animate' : ''}`} ref={ref2}>\r\n              <div className=\"image-container\">\r\n                <img src={aboutImage1} alt=\"About Us\" className=\"about-image\" />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"statistics mt-4 \">\r\n            {aboutData.about.statistics.map((stat, index) => (\r\n              <Col md={6} key={index} className={`stat-item ${inView3 ? 'animate' : ''}`} ref={ref3}>\r\n                <ul>\r\n                  {stat.list.map((item, idx) => (\r\n                    <li key={idx}>{item}</li>\r\n                  ))}\r\n                </ul>\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n          <Row className=\"mt-5 align-items-center\">\r\n            <Col md={6} className={`${inView4 ? 'animate' : ''}`} ref={ref4}>\r\n              <div className=\"image-container\">\r\n                <img src={aboutImage2} alt=\"Activities\" className=\"about-image\" />\r\n              </div>\r\n            </Col>\r\n            <Col md={6} className={`${inView4 ? 'animate' : ''}`} ref={ref4}>\r\n              <div className=\"mission-description\">\r\n                <h2>Fredericton Association of Malayalees</h2>\r\n                <p>\r\n                  Through FAM (Fredericton Association of Malayalees), we unite and join hands to pass the culture on to generations. As a team, we conduct cultural activities, linguistic programs, festivals, charity activities, etc. FAM is a forum where we can meet, exchange views, and foster friendships.\r\n                </p>\r\n                <p>\r\n                  Malayalees in Fredericton are represented in FAM, which advocates for their wellbeing and cultural needs. With all our cooperative efforts, FAM pledges to keep our next generation abreast of our mother tongue, culture, and enriched heritage.\r\n                </p>\r\n                <p>\r\n                  We are open to collaborating and engaging with other cultural groups and ethnicities. Let us hold our hands to form a composite culture with every color and song to be felt and experienced in its original essence under a single umbrella.\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"mt-5\">\r\n            <Col md={6} className={`${inView4 ? 'animate' : ''}`} ref={ref4}>\r\n              <div className=\"mission-vision\">\r\n                <h2>Our Mission</h2>\r\n                <p>{missionVisionData.missionVision.mission}</p>\r\n              </div>\r\n            </Col>\r\n            <Col md={6} className={`${inView4 ? 'animate' : ''}`} ref={ref4}>\r\n              <div className=\"mission-vision\">\r\n                <h2>Our Vision</h2>\r\n                <p>{missionVisionData.missionVision.vision}</p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      <JoinComponent />\r\n      <FullWidthImage />\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AboutUsPage;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["Breadcrumbs","pathnames","useLocation","pathname","split","filter","x","_jsx","style","marginTop","marginBottom","children","_jsxs","MUIBreadcrumbs","separator","NavigateNextIcon","fontSize","sx","display","alignItems","Link","color","to","component","RouterLink","textDecoration","padding","borderRadius","background","transition","HomeIcon","mr","map","value","index","concat","slice","join","isLast","length","breadcrumb","replace","char","toUpperCase","formatBreadcrumb","Typography","FullWidthImage","culture","process","className","src","alt","setVariants","visualElement","variantLabels","reverse","forEach","key","variant","getVariant","setTarget","variantChildren","child","animationControls","hasMounted","subscribers","Set","controls","subscribe","add","delete","start","definition","transitionOverride","invariant","animations","push","animateVisualElement","Promise","all","set","Array","isArray","setValues","stop","values","stopAnimation","mount","useAnimation","useConstant","useIsomorphicLayoutEffect","JoinComponent","motion","div","initial","opacity","y","animate","duration","onHoverStart","scale","onHoverEnd","button","whileHover","backgroundColor","whileTap","FaUserPlus","marginRight","AboutUsPage","ref1","inView1","useInView","triggerOnce","ref2","inView2","ref3","inView3","ref4","inView4","aboutImage1","aboutImage2","_Fragment","HelmetWrapper","pageTitle","description","Container","Row","ref","Col","md","aboutData","paragraph","stat","list","item","idx","missionVisionData","Footer","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","root","has","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","entry","_a","inView","some","trackVisibility","isVisible","createObserver","callbacks","splice","indexOf","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}