{"version":3,"file":"static/js/116.06c1a9f8.chunk.js","mappings":"uOAKA,MAAMA,EAAS,CAAC,GAADC,OACVC,IAAsB,8CAAAD,OACtBC,IAAsB,yCAAAD,OACtBC,IAAsB,wCAGrBC,EAAQ,CACZ,CACEC,QAAS,iBACTC,YAAa,iIACbC,WAAY,CAAEC,KAAM,WAAYC,OAAQ,YACxCC,aAAc,CAAEF,KAAM,aAAcC,OAAQ,aAE9C,CACEJ,QAAS,yBACTC,YAAa,sEACbC,WAAY,CAAEC,KAAM,SAAUC,OAAQ,WACtCC,aAAc,CAAEF,KAAM,YAAaC,OAAQ,YAE7C,CACEJ,QAAS,6BACTC,YAAa,+DACbC,WAAY,CAAEC,KAAM,WAAYC,OAAQ,SACxCC,aAAc,CAAEF,KAAM,aAAcC,OAAQ,WAqDhD,EAjDoBE,KAClB,MAAQC,IAAKC,EAASC,OAAQC,IAAeC,EAAAA,EAAAA,IAAU,CAAEC,aAAa,IAChEC,GAAWC,EAAAA,EAAAA,OACVC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,GAU7C,OARAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAWC,aAAY,KAC3BJ,GAAeK,IAAeA,EAAY,GAAKzB,EAAO0B,QAAO,GAC5D,KAEH,MAAO,IAAMC,cAAcJ,EAAS,GACnC,KAGDK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,CAC1B9B,EAAOgC,KAAI,CAACC,EAAOC,KAClBN,EAAAA,EAAAA,KAAA,OAEEC,UAAS,cAAA5B,OAAgBiC,IAAUf,EAAa,UAAY,IAC5DgB,MAAO,CAAEC,gBAAgB,OAADnC,OAASgC,EAAK,OAFjCC,MAKTN,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aACfD,EAAAA,EAAAA,KAAA,QAAMC,UAAU,oBAAmBC,UACjCC,EAAAA,EAAAA,MAAA,OAAKF,UAAS,gBAAA5B,OAAkBa,EAAa,gBAAkB,IAAMH,IAAKC,EAAQkB,SAAA,EAChFF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,uBAAsBC,SACjC3B,EAAMgB,GAAYf,WAErB2B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,KAAAE,SACG3B,EAAMgB,GAAYd,eAErB0B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,cAAcQ,QAASA,IAAMpB,EAASd,EAAMgB,GAAYb,WAAWE,QAAQsB,SAC1F3B,EAAMgB,GAAYb,WAAWC,QAEhCqB,EAAAA,EAAAA,KAAA,UAAQC,UAAU,gBAAgBQ,QAASA,IAAMpB,EAASd,EAAMgB,GAAYV,aAAaD,QAAQsB,SAC9F3B,EAAMgB,GAAYV,aAAaF,sBAOxC,C,wMC3EJ+B,EAAc,IAAIC,IASlBC,EAA+C,IAAIC,QACrDC,EAAS,EAETC,OAAwC,EA6BrC,SAASC,EAAYC,GAC1B,OAAOC,OAAOC,KAAKF,GAChBG,OACAC,QACEC,QAA2D,IAAnDL,EAAQK,KAElBlB,KAAKkB,IACJ,MAAO,GAAPjD,OAAUiD,EAAG,KAAAjD,OACH,SAARiD,GArBWC,EAsBGN,EAAQM,OApBxBX,EAAQY,IAAID,KAChBT,GAAU,EACVF,EAAQa,IAAIF,EAAMT,EAAOY,aAFKd,EAAQe,IAAIJ,IADxB,IAsBRN,EAAQK,IAvBpB,IAAmBC,CAwBb,IAEDG,UACL,CA4DO,SAASE,EACdC,EACAC,GAGA,IAFAb,EAAAc,UAAAjC,OAAA,QAAAkC,IAAAD,UAAA,GAAAA,UAAA,GAAoC,CAAC,EACrCE,EAAAF,UAAAjC,OAAA,QAAAkC,IAAAD,UAAA,GAAAA,UAAA,GAAiBhB,EAEjB,GACyC,qBAAhCmB,OAAOC,2BACK,IAAnBF,EACA,CACA,MAAMG,EAASP,EAAQQ,wBAWvB,OAVAP,EAASG,EAAgB,CACvBK,eAAgBL,EAChBM,OAAQV,EACRW,kBAC+B,kBAAtBvB,EAAQwB,UAAyBxB,EAAQwB,UAAY,EAC9DC,KAAM,EACNC,mBAAoBP,EACpBQ,iBAAkBR,EAClBS,WAAYT,IAEP,MAGT,CAEA,MAAM,GAAEU,EAAA,SAAIC,EAAA,SAAUC,GApFxB,SAAwB/B,GAEtB,MAAM6B,EAAK9B,EAAYC,GACvB,IAAIgC,EAAWvC,EAAYiB,IAAImB,GAE/B,IAAKG,EAAU,CAEb,MAAMD,EAAW,IAAIrC,IAErB,IAAIuC,EAEJ,MAAMH,EAAW,IAAIZ,sBAAsBgB,IACzCA,EAAQC,SAASC,IAvEvB,IAAAC,EA0EQ,MAAMrE,EACJoE,EAAMf,gBACNY,EAAWK,MAAMd,GAAcY,EAAMb,mBAAqBC,IAGxDxB,EAAQuC,iBAA8C,qBAApBH,EAAMI,YAG1CJ,EAAMI,UAAYxE,GAGpB,OAAAqE,EAAAN,EAASrB,IAAI0B,EAAMd,UAAnBe,EAA4BF,SAAStB,IACnCA,EAAS7C,EAAQoE,EAAM,GACvB,GACF,GACDpC,GAGHiC,EACEH,EAASG,aACRQ,MAAMC,QAAQ1C,EAAQwB,WACnBxB,EAAQwB,UACR,CAACxB,EAAQwB,WAAa,IAE5BQ,EAAW,CACTH,KACAC,WACAC,YAGFtC,EAAYe,IAAIqB,EAAIG,EACtB,CAEA,OAAOA,CACT,CAmCqCW,CAAe3C,GAG5C4C,EAAYb,EAASrB,IAAIE,IAAY,GAQ3C,OAPKmB,EAASxB,IAAIK,IAChBmB,EAASvB,IAAII,EAASgC,GAGxBA,EAAUC,KAAKhC,GACfiB,EAASnB,QAAQC,GAEV,WAELgC,EAAUE,OAAOF,EAAUG,QAAQlC,GAAW,GAErB,IAArB+B,EAAU/D,SAEZkD,EAASiB,OAAOpC,GAChBkB,EAASmB,UAAUrC,IAGC,IAAlBmB,EAASmB,OAEXpB,EAASqB,aACT1D,EAAYuD,OAAOnB,GAEvB,CACF,CC1GkCuB,EAAAA,UC7B3B,SAASlF,IAWiC,IAXvB,UACxBsD,EAAA,MACA6B,EAAA,gBACAd,EAAA,WACAe,EAAAhD,KACAA,EAAA,YACAnC,EAAA,KACAoF,EAAA,cACAC,EAAA,eACAxC,EAAA,SACAyC,GACF3C,UAAAjC,OAAA,QAAAkC,IAAAD,UAAA,GAAAA,UAAA,GAAyB,CAAC,EA9C1B,IAAAuB,EA+CE,MAAOvE,EAAK4F,GAAgBC,EAAAA,SAAyB,MAC/C9C,EAAiB8C,EAAAA,UAChBC,EAAOC,GAAkBF,EAAAA,SAAgB,CAC9C3F,SAAUwF,EACVpB,WAAO,IAKTvB,EAASiD,QAAUL,EAGbE,EAAAA,WACJ,KAEE,GAAIJ,IAASzF,EAAK,OAElB,IAAImF,EA4BJ,OA3BAA,EAAYtC,EACV7C,GACA,CAACE,EAAQoE,KACPyB,EAAS,CACP7F,SACAoE,UAEEvB,EAASiD,SAASjD,EAASiD,QAAQ9F,EAAQoE,GAE3CA,EAAMf,gBAAkBlD,GAAe8E,IAEzCA,IACAA,OAAY,EACd,GAEF,CACE3C,OACAgD,aACA9B,YAEAe,kBAEAc,SAEFrC,GAGK,KACDiC,GACFA,GACF,CACD,GAIH,CAEER,MAAMC,QAAQlB,GAAaA,EAAUf,WAAae,EAClD1D,EACAwC,EACAgD,EACAnF,EACAoF,EACAhB,EACAvB,EACAqC,IAIJ,MAAMU,EAAc,OAAA1B,EAAAuB,EAAMxB,YAAN,EAAAC,EAAaf,OAC3B0C,EAA4BL,EAAAA,SAE/B7F,IACDiG,GACC5F,GACAoF,GACDS,EAAoBF,UAAYC,IAIhCC,EAAoBF,QAAUC,EAC9BF,EAAS,CACP7F,SAAUwF,EACVpB,WAAO,KAIX,MAAM6B,EAAS,CAACP,EAAQE,EAAM5F,OAAQ4F,EAAMxB,OAO5C,OAJA6B,EAAOnG,IAAMmG,EAAO,GACpBA,EAAOjG,OAASiG,EAAO,GACvBA,EAAO7B,MAAQ6B,EAAO,GAEfA,CACT,C","sources":["components/Landingpage.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './LandingPage.css';\r\n\r\nconst images = [\r\n  `${process.env.PUBLIC_URL}/images/heroimages/Fredericton-Hero.jpg`,\r\n  `${process.env.PUBLIC_URL}/images/heroimages/Kerala-hero.jpg`,\r\n  `${process.env.PUBLIC_URL}/images/heroimages/Kerala-hero1.jpg`\r\n];\r\n\r\nconst texts = [\r\n  {\r\n    welcome: 'Welcome to FAM',\r\n    description: 'Fredericton Association of Malayalees (FAM) is a registered non-profit organization established under the Society Act in 2021.',\r\n    primaryBtn: { text: 'About Us', action: '/aboutus' },\r\n    secondaryBtn: { text: 'Learn more', action: '/aboutus' }\r\n  },\r\n  {\r\n    welcome: 'Join us for our events',\r\n    description: 'Explore our upcoming events and join us for a wonderful experience.',\r\n    primaryBtn: { text: 'Events', action: '/events' },\r\n    secondaryBtn: { text: 'More info', action: '/events' }\r\n  },\r\n  {\r\n    welcome: 'Be a part of our community',\r\n    description: 'Join us and be a part of a vibrant and supportive community.',\r\n    primaryBtn: { text: 'Join Now', action: '/join' },\r\n    secondaryBtn: { text: 'Learn more', action: '/join' }\r\n  }\r\n];\r\n\r\nconst LandingPage = () => {\r\n  const { ref: textRef, inView: textInView } = useInView({ triggerOnce: false });\r\n  const navigate = useNavigate();\r\n  const [imageIndex, setImageIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setImageIndex((prevIndex) => (prevIndex + 1) % images.length);\r\n    }, 4000); // Change image every 10 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"landing-page\">\r\n      <div className=\"hero-section\">\r\n        {images.map((image, index) => (\r\n          <div\r\n            key={index}\r\n            className={`hero-image ${index === imageIndex ? 'visible' : ''}`}\r\n            style={{ backgroundImage: `url(${image})` }}\r\n          />\r\n        ))}\r\n        <div className=\"overlay\"></div>\r\n        <main className=\"main-content mt-5\">\r\n          <div className={`text-content ${textInView ? 'slide-in-left' : ''}`} ref={textRef}>\r\n            <h2 className=\"welcome-message mt-5\">\r\n              {texts[imageIndex].welcome}\r\n            </h2>\r\n            <div className=\"left-aligned-content\">\r\n              <p>\r\n                {texts[imageIndex].description}\r\n              </p>\r\n              <div className=\"button-group\">\r\n                <button className=\"primary-btn\" onClick={() => navigate(texts[imageIndex].primaryBtn.action)}>\r\n                  {texts[imageIndex].primaryBtn.text}\r\n                </button>\r\n                <button className=\"secondary-btn\" onClick={() => navigate(texts[imageIndex].secondaryBtn.action)}>\r\n                  {texts[imageIndex].secondaryBtn.text}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["images","concat","process","texts","welcome","description","primaryBtn","text","action","secondaryBtn","LandingPage","ref","textRef","inView","textInView","useInView","triggerOnce","navigate","useNavigate","imageIndex","setImageIndex","useState","useEffect","interval","setInterval","prevIndex","length","clearInterval","_jsx","className","children","_jsxs","map","image","index","style","backgroundImage","onClick","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","id","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}