{"version":3,"file":"static/js/961.940de1d7.chunk.js","mappings":"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","sources":["components/MissionVision.js","../node_modules/react-simple-typewriter/src/reducer.ts","../node_modules/react-simple-typewriter/src/hooks/useTypewriter.tsx","../node_modules/react-simple-typewriter/node_modules/style-inject/dist/style-inject.es.js","../node_modules/react-simple-typewriter/src/components/Cursor.tsx","../node_modules/react-simple-typewriter/src/components/Typewriter.tsx","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { Typewriter } from 'react-simple-typewriter';\r\nimport { motion } from 'framer-motion';\r\nimport './MissionVision.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Loading from './Loading'; // Ensure this is the correct path to your Loading component\r\n\r\nconst TEXTS = ['MISSION', 'VISION'];\r\n\r\nconst MissionVision = () => {\r\n  const { ref: textRef, inView: textInView } = useInView({\r\n    triggerOnce: false,\r\n  });\r\n\r\n  const { ref: imageRef, inView: imageInView } = useInView({\r\n    triggerOnce: false,\r\n  });\r\n\r\n  const navigate = useNavigate();\r\n  const [index, setIndex] = useState(0);\r\n  const [missionVisionData, setMissionVisionData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMissionVisionData = async () => {\r\n      try {\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/config/missionvission.json`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n        const data = await response.json();\r\n        setMissionVisionData(data.missionVision);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchMissionVisionData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setIndex(index => (index + 1) % TEXTS.length);\r\n    }, 5000); // Change the word every 5 seconds\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const missionImage = `${process.env.PUBLIC_URL}/images/heroimages/MissionVission-Hero.png`;\r\n\r\n  return (\r\n    <div className=\"mv-section\" id=\"mission\">\r\n      <Container>\r\n        <Row className=\"align-items-center\">\r\n          <Col md={6} ref={textRef}>\r\n            <motion.div\r\n              className=\"mv-text-container\"\r\n              initial={{ x: 100, opacity: 0 }}\r\n              animate={{ x: textInView ? 0 : 100, opacity: textInView ? 1 : 0 }}\r\n              transition={{ duration: 0.5 }}\r\n            >\r\n              <h2>\r\n                OUR <span className=\"highlight-text\">\r\n                  <Typewriter\r\n                    words={['MISSION']}\r\n                    loop={true}\r\n                    cursor\r\n                    cursorStyle=\"_\"\r\n                    typeSpeed={50}\r\n                    deleteSpeed={50}\r\n                    delaySpeed={2000}\r\n                  />\r\n                </span>\r\n              </h2>\r\n              <p>{missionVisionData.mission}</p>\r\n              <h2>\r\n                OUR <span className=\"highlight-text\">\r\n                  <Typewriter\r\n                    words={['VISION']}\r\n                    loop={true}\r\n                    cursor\r\n                    cursorStyle=\"_\"\r\n                    typeSpeed={100}\r\n                    deleteSpeed={50}\r\n                    delaySpeed={1000}\r\n                  />\r\n                </span>\r\n              </h2>\r\n              <p>{missionVisionData.vision}</p>\r\n              <button className=\"mv-read-more-btn mb-4\" onClick={() => navigate('/aboutus')}>Read More</button>\r\n            </motion.div>\r\n          </Col>\r\n          <Col md={6} ref={imageRef}>\r\n            <motion.div\r\n              className=\"mv-image-container\"\r\n              initial={{ x: -100, opacity: 0 }}\r\n              animate={{ x: imageInView ? 0 : -100, opacity: imageInView ? 1 : 0 }}\r\n              transition={{ duration: 0.5 }}\r\n            >\r\n              <img src={missionImage} alt=\"Mission and Vision\" className=\"mv-mission-image img-fluid\" />\r\n            </motion.div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MissionVision;\r\n","export type State = {\r\n  speed: number\r\n  text: string\r\n  count: number\r\n}\r\n\r\nexport type Action =\r\n  | { type: 'DELAY'; payload: number }\r\n  | { type: 'TYPE'; payload: string; speed: number }\r\n  | { type: 'DELETE'; payload: string; speed: number }\r\n  | { type: 'COUNT' }\r\n\r\nexport function reducer(state: State, action: Action): State {\r\n  switch (action.type) {\r\n    case 'TYPE':\r\n      return {\r\n        ...state,\r\n        speed: action.speed,\r\n        text: action.payload?.substring(0, state.text.length + 1)\r\n      }\r\n    case 'DELAY':\r\n      return {\r\n        ...state,\r\n        speed: action.payload\r\n      }\r\n    case 'DELETE':\r\n      return {\r\n        ...state,\r\n        speed: action.speed,\r\n        text: action.payload?.substring(0, state.text.length - 1)\r\n      }\r\n    case 'COUNT':\r\n      return {\r\n        ...state,\r\n        count: state.count + 1\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { useCallback, useEffect, useRef, useReducer } from 'react'\r\nimport { reducer } from '../reducer'\r\n\r\nexport type TypewriterProps = {\r\n  /** Callback Function that is triggered when loops are completed. available if loop is > `0` */\r\n  onLoopDone?: () => void\r\n  /** Callback Function that is triggered while typing with `typed` words count passed */\r\n  onType?: (count: number) => void\r\n  /** Callback Function that is triggered while deleting */\r\n  onDelete?: () => void\r\n  /** Callback Function that is triggered on typing delay */\r\n  onDelay?: () => void\r\n  /** Array of strings holding the words */\r\n  words: string[]\r\n  /** Control how many times to run. `0 | false` to run infinitely */\r\n  loop?: number | boolean\r\n  /** Character typing speed in Milliseconds */\r\n  typeSpeed?: number\r\n  /** Character deleting speed in Milliseconds */\r\n  deleteSpeed?: number\r\n  /** Delay time between the words in Milliseconds */\r\n  delaySpeed?: number\r\n}\r\n\r\nexport type TypewriterHelper = {\r\n  /** `true` if currently typing */\r\n  isType: boolean\r\n  /** `true` if on delay */\r\n  isDelay: boolean\r\n  /** `true` if currently deleting */\r\n  isDelete: boolean\r\n  /** `true` if all loops are done */\r\n  isDone: boolean\r\n}\r\n\r\nexport const useTypewriter = ({\r\n  words = ['Hello World!', 'This is', 'a simple Typewriter'],\r\n  loop = 1,\r\n  typeSpeed = 80,\r\n  deleteSpeed = 50,\r\n  delaySpeed = 1500,\r\n  onLoopDone,\r\n  onType,\r\n  onDelete,\r\n  onDelay\r\n}: TypewriterProps): [string, TypewriterHelper] => {\r\n  const [{ speed, text, count }, dispatch] = useReducer(reducer, {\r\n    speed: typeSpeed,\r\n    text: '',\r\n    count: 0\r\n  })\r\n\r\n  // Refs\r\n  const loops = useRef(0)\r\n  const isDone = useRef(false)\r\n  const isDelete = useRef(false)\r\n  const isType = useRef(false)\r\n  const isDelay = useRef(false)\r\n\r\n  const handleTyping = useCallback(() => {\r\n    const index = count % words.length\r\n    const fullWord = words[index]\r\n\r\n    if (!isDelete.current) {\r\n      dispatch({ type: 'TYPE', payload: fullWord, speed: typeSpeed })\r\n      isType.current = true\r\n\r\n      if (text === fullWord) {\r\n        dispatch({ type: 'DELAY', payload: delaySpeed })\r\n        isType.current = false\r\n        isDelay.current = true\r\n\r\n        setTimeout(() => {\r\n          isDelay.current = false\r\n          isDelete.current = true\r\n        }, delaySpeed)\r\n\r\n        if (loop > 0) {\r\n          loops.current += 1\r\n          if (loops.current / words.length === loop) {\r\n            isDelay.current = false\r\n            isDone.current = true\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      dispatch({ type: 'DELETE', payload: fullWord, speed: deleteSpeed })\r\n      if (text === '') {\r\n        isDelete.current = false\r\n        dispatch({ type: 'COUNT' })\r\n      }\r\n    }\r\n\r\n    if (isType.current) {\r\n      if (onType) onType(loops.current)\r\n    }\r\n\r\n    if (isDelete.current) {\r\n      if (onDelete) onDelete()\r\n    }\r\n\r\n    if (isDelay.current) {\r\n      if (onDelay) onDelay()\r\n    }\r\n  }, [\r\n    count,\r\n    delaySpeed,\r\n    deleteSpeed,\r\n    loop,\r\n    typeSpeed,\r\n    words,\r\n    text,\r\n    onType,\r\n    onDelete,\r\n    onDelay\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const typing = setTimeout(handleTyping, speed)\r\n\r\n    if (isDone.current) clearTimeout(typing)\r\n\r\n    return () => clearTimeout(typing)\r\n  }, [handleTyping, speed])\r\n\r\n  useEffect(() => {\r\n    if (!onLoopDone) return\r\n\r\n    if (isDone.current) {\r\n      onLoopDone()\r\n    }\r\n  }, [onLoopDone])\r\n\r\n  return [\r\n    text,\r\n    {\r\n      isType: isType.current,\r\n      isDelay: isDelay.current,\r\n      isDelete: isDelete.current,\r\n      isDone: isDone.current\r\n    }\r\n  ]\r\n}\r\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { ReactNode, memo } from 'react'\r\nimport styles from '../styles.module.css'\r\n\r\nexport type CursorProps = {\r\n  /** Enable cursor blinking animation */\r\n  cursorBlinking?: boolean\r\n  /** Change cursor style */\r\n  cursorStyle?: ReactNode\r\n  /** Change cursor color */\r\n  cursorColor?: string\r\n}\r\n\r\nconst MemoizedCursor = ({\r\n  cursorBlinking = true,\r\n  cursorStyle = '|',\r\n  cursorColor = 'inherit'\r\n}: CursorProps): JSX.Element => {\r\n  return (\r\n    <span\r\n      style={{ color: cursorColor }}\r\n      className={`${styles.blinkingCursor} ${\r\n        cursorBlinking ? styles.blinking : ''\r\n      }`}\r\n    >\r\n      {cursorStyle}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport const Cursor = memo(MemoizedCursor)\r\n","import { TypewriterProps, useTypewriter } from '../hooks/useTypewriter'\r\nimport { Cursor, CursorProps } from './Cursor'\r\n\r\ntype ComponentProps = {\r\n  /** Show / Hide the cursor */\r\n  cursor?: boolean\r\n} & TypewriterProps &\r\n  CursorProps\r\n\r\n/**\r\n * A Simple React Component for adding a nice Typewriter effect to your project.\r\n */\r\nexport const Typewriter = ({\r\n  words = ['Hello World!', 'This is', 'a simple Typewriter'],\r\n  loop = 1,\r\n  typeSpeed = 80,\r\n  deleteSpeed = 50,\r\n  delaySpeed = 1500,\r\n  cursor = false,\r\n  cursorStyle = '|',\r\n  cursorColor = 'inherit',\r\n  cursorBlinking = true,\r\n  onLoopDone,\r\n  onType,\r\n  onDelay,\r\n  onDelete\r\n}: ComponentProps): JSX.Element => {\r\n  const [text] = useTypewriter({\r\n    words,\r\n    loop,\r\n    typeSpeed,\r\n    deleteSpeed,\r\n    delaySpeed,\r\n    onLoopDone,\r\n    onType,\r\n    onDelay,\r\n    onDelete\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <span>{text}</span>\r\n      {cursor && (\r\n        <Cursor\r\n          cursorStyle={cursorStyle}\r\n          cursorColor={cursorColor}\r\n          cursorBlinking={cursorBlinking}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["TEXTS","MissionVision","ref","textRef","inView","textInView","useInView","triggerOnce","imageRef","imageInView","navigate","useNavigate","index","setIndex","useState","missionVisionData","setMissionVisionData","loading","setLoading","error","setError","useEffect","async","response","fetch","concat","process","ok","Error","data","json","missionVision","console","fetchMissionVisionData","intervalId","setInterval","length","clearInterval","_jsx","Loading","children","missionImage","className","id","Container","_jsxs","Row","Col","md","motion","div","initial","x","opacity","animate","transition","duration","Typewriter","words","loop","cursor","cursorStyle","typeSpeed","deleteSpeed","delaySpeed","mission","vision","onClick","src","alt","o","e","t","n","type","r","speed","text","payload","substring","count","i","s","u","l","c","d","a","p","y","onLoopDone","f","onType","v","onDelete","m","onDelay","h","useReducer","T","g","_","D","C","useRef","E","S","b","k","w","useCallback","current","setTimeout","clearTimeout","isType","isDelay","isDelete","isDone","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","memo","cursorBlinking","cursorColor","jsx","style","color","exports","jsxs","Fragment","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","root","has","set","toString","get","observe","element","callback","arguments","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","entryTarget","previousEntryTarget","result"],"sourceRoot":""}