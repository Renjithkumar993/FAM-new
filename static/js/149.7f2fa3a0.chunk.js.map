{"version":3,"file":"static/js/149.7f2fa3a0.chunk.js","mappings":"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","sources":["components/AboutUs.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-intersection-observer/src/observe.ts","../node_modules/react-intersection-observer/src/InView.tsx","../node_modules/react-intersection-observer/src/useInView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport './AboutUs.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Loading from './Loading'; // Ensure this is the correct path to your Loading component\r\n\r\nconst AboutUs = () => {\r\n  const { ref: aboutRef, inView: aboutInView } = useInView({\r\n    triggerOnce: false,\r\n    threshold: 0.1,\r\n  });\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/config/aboutus.json`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n        const data = await response.json();\r\n        setData(data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const aboutImage = `${process.env.PUBLIC_URL}/images/heroimages/Aboutus-hero.png`;\r\n\r\n  return (\r\n    <section className={`about-us-section ${aboutInView ? 'animate' : ''}`} ref={aboutRef} id=\"about\">\r\n      <Container>\r\n        <Row className=\"align-items-center\">\r\n          <Col xs={12} md={6} className=\"order-1 order-md-2\">\r\n            <div className=\"about-text\">\r\n              <h1><span className='hilite-color'>Malayalee</span> Community</h1>\r\n              <h2>Celebrating Kerala Culture in Fredericton, Canada</h2>\r\n              {data.about.description.map((paragraph, index) => (\r\n                <p key={index}>{paragraph}</p>\r\n              ))}\r\n              <Button variant=\"outline-dark mb-5\" onClick={() => navigate('/contactus')}>Get in touch</Button>\r\n            </div>\r\n          </Col>\r\n          <Col xs={12} md={6} className=\"order-2 order-md-1\">\r\n            <img src={aboutImage} alt=\"Mission and Vision\" className=\"mv-mission-image img-fluid\" />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default AboutUs;\r\n","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant = 'primary',\n  size,\n  active = false,\n  disabled = false,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    disabled,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, {\n    ...buttonProps,\n    ...props,\n    ref: ref,\n    disabled: disabled,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nexport default Button;","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    // biome-ignore lint/style/useConst: It's fine to use let here, as we are going to assign it later\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from \"react\";\nimport type { InViewHookResponse, IntersectionOptions } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["AboutUs","ref","aboutRef","inView","aboutInView","useInView","triggerOnce","threshold","data","setData","useState","loading","setLoading","error","setError","navigate","useNavigate","useEffect","async","response","fetch","concat","process","ok","Error","json","console","fetchData","_jsx","Loading","children","aboutImage","className","id","Container","_jsxs","Row","Col","xs","md","about","description","map","paragraph","index","Button","variant","onClick","src","alt","_excluded","useButtonProps","_ref2","tagName","disabled","href","target","rel","role","tabIndex","type","meta","handleClick","event","trim","isTrivialHref","preventDefault","stopPropagation","undefined","onKeyDown","key","React","_ref","as","asProp","props","source","excluded","i","sourceKeys","Object","keys","length","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","assign","displayName","bsPrefix","size","active","prefix","useBootstrapPrefix","classNames","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","sort","filter","root","has","set","toString","get","observe","element","callback","arguments","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","intersectionRatio","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_a","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","delete","unobserve","disconnect","delay","rootMargin","skip","initialInView","onChange","setRef","React2","state","setState","current","entryTarget","previousEntryTarget","result"],"sourceRoot":""}